name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Job de Build
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Build Docker image
      run: docker build -t priscillatrevizan/task-manager-app:latest .

    - name: Push Docker image to Docker Hub
      run: docker push priscillatrevizan/task-manager-app:latest

  # Job de Testes
  test1:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt

    - name: Run tests
      run: |
        source venv/bin/activate
        python -m unittest discover -s tests

  # Job de Segurança com Bandit
  security_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Bandit
      run: pip install bandit

    - name: Run Bandit security scan
      run: bandit -r todo_project

  # Job de Análise de Dependências com OWASP Dependency-Check
  dependency_check:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Install OWASP Dependency-Check
      run: |
        curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v7.4.0/dependency-check-7.4.0-release.zip
        unzip dependency-check.zip
        chmod +x dependency-check/bin/dependency-check.sh

    - name: Run OWASP Dependency-Check
      run: |
        ./dependency-check/bin/dependency-check.sh --project "Task Manager" --scan . --format "HTML" --out dependency-report.html

    - name: Upload dependency report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-report
        path: dependency-report.html

  # Job de DAST com OWASP ZAP
  dast_scan:
    runs-on: ubuntu-latest
    needs: test1
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Limpar containers antigos do OWASP ZAP
    - name: Clean up old OWASP ZAP containers
      run: docker rm -f owasp-zap || true

    # Rodar o OWASP ZAP em modo daemon usando a imagem `ictu/zap2docker-weekly`
    - name: Run OWASP ZAP in daemon mode
      run: |
        docker run -d --name owasp-zap -u zap -p 8080:8080 ictu/zap2docker-weekly zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.disablekey=true

    # Esperar até o OWASP ZAP estar pronto
    - name: Wait for OWASP ZAP to be ready
      run: sleep 60  # Aguarda 60 segundos para garantir que o ZAP esteja pronto

    # Rodar o Active Scan do OWASP ZAP via API
    - name: Run OWASP ZAP Active Scan using API
      run: |
        curl "http://localhost:8080/JSON/ascan/action/scan/?url=http://localhost:5000&recurse=true"

    # Gerar o relatório do OWASP ZAP
    - name: Generate OWASP ZAP Report
      run: |
        curl "http://localhost:8080/OTHER/core/other/htmlreport/" -o zap_report.html

    # Upload do relatório de segurança
    - name: Upload ZAP Report
      uses: actions/upload-artifact@v3
      with:
        name: zap-report
        path: zap_report.html

  # Job de Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: test1
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Deploy Docker image
      run: docker run -d -p 5000:5000 priscillatrevizan/task-manager-app:latest

  # Job de Configuração do Graylog
  graylog_setup:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Subir container Graylog
    - name: Run Graylog in Docker
      run: |
        docker run -d --name graylog -p 9000:9000 -p 12201:12201 -p 514:514 graylog/graylog:4.2
    
    # Esperar até Graylog estar pronto
    - name: Wait for Graylog to be ready
      run: |
        until curl -s -o /dev/null -w "%{http_code}" http://localhost:9000/api/system | grep "200"; do echo "Waiting for Graylog..."; sleep 10; done

    # Configurar Graylog via API
    - name: Configure Graylog
      run: |
        curl -u admin:admin_password -X POST "http://localhost:9000/api/system/inputs" -H "Content-Type: application/json" \
        -d '{"title": "Task Manager Logs", "global": true, "type": "org.graylog2.inputs.syslog.udp.SyslogUDPInput", "configuration": {"bind_address": "0.0.0.0", "port": 514}}'

    # Verificar logs
    - name: Verify Graylog Logs
      run: |
        curl -u admin:admin_password "http://localhost:9000/api/search/universal/relative?query=message%3A%22Task+Manager%22&range=300"

